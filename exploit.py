from board import Board, Move
import random
import numpy as np

from sklearn.linear_model.stochastic_gradient import SGDRegressor
from sklearn.externals import joblib

ITERATIONS = int(1e3)

qtable = joblib.load('model.pk1')

def run_game():
    board = Board()
    board.fill_random()

    count = 0

    states = []

    while not board.check_game_over():
        choice = random.random()

        valid_moves = board.valid_moves()

        move = get_best_move(board, valid_moves)
        # move = random.choice(valid_moves)

        board.move(move)

        count += 1

    return count

def get_best_move(board, valid_moves):
    best_val = 0
    state = board.state()

    state.append(0)

    best_move = random.choice(valid_moves)

    for move in valid_moves:
        state[-1] = move.index
        result = qtable.predict(state)

        if result[0] > best_val:
            best_val = result[0]
            best_move = move

    return best_move

def main():
    counts = []
    for i in xrange(ITERATIONS):
        count = run_game()

        if i % 200 == 0:
            print i, count
        counts.append(count)

    print sum(counts) / float(len(counts))


if __name__ == '__main__':
    main()
